# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

pool:
  name: 'Default'
  vmImage: 'DEV'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    pool:
      name: 'Default'
      vmImage: 'DEV'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '16.x'
        displayName: 'Install Node.js 16.x'

      - script: |
          cd erp-fo/
          npm install -g @angular/cli
          npm install
          ng build --prod          
        displayName: 'npm install and build'
        workingDirectory: '$(Build.SourcesDirectory)'
      # - task: CmdLine@2
      #   displayName: "Run unit tests"
      #   inputs:
      #     script: |
      #       cd erp-fo/
      #       ng test --browsers=ChromeHeadless --code-coverage --watch=false
      - task: ArchiveFiles@2
        displayName: 'Archive files'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist/angular'
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          replaceExistingArchive: true

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          ArtifactName: 'drop'
          publishLocation: 'Container'

# - stage: Development
#   displayName: 'Deploy to Development'
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: DeploymentDevelopment
#     pool:
#       name: 'Default'
#       vmImage: 'DEV'
#     environment: Development
#     strategy:
#       runOnce:
#         deploy:
#           steps:

#           - task: AzureWebApp@1
#             displayName: 'Deploy App Service'
#             inputs:
#               azureSubscription: 'Pay-As-You-Go(492b46dd-6af1-4b0d-a72c-203821698848)'
#               appType: 'webAppLinux'
#               appName: 'erp-fo'
#               package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
#               runtimeStack: 'NODE|16-lts'


# - stage: Production  
#   displayName: 'Deploy to Production'
#   jobs:
#     - deployment: DeployProduction
#       pool:
#         name: 'Default'
#         vmImage: 'DEV'
#       environment: Production
#       strategy:
#         runOnce:
#           deploy:
#             steps:
#             - script: echo Deploying to Production